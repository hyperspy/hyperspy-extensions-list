name: Integration tests

on:
  workflow_dispatch:
    workflow: "*"
  schedule:
    - cron:  '10 0 * * *'
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  integration_test:
    name: hs_${{ matrix.HYPERSPY_VERSION }}-ext_${{ matrix.EXTENSION_VERSION }}${{ matrix.LABEL }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        HYPERSPY_VERSION: ['release', 'RnP', 'RnM']
        EXTENSION_VERSION: ['release', 'dev']
        DEPENDENCIES_DEV: [false]
        DEPENDENCIES_PRE_RELEASE: [false]
        DEPENDENCIES_NUMBA_DEV: [false]
        USE_MAMBA: [true]
        include:
          # test against upstream dev
          - DEPENDENCIES_DEV: true
            # Install dev version from https://pypi.anaconda.org/scipy-wheels-nightly/simple
            # using pip
            LABEL: -dependencies_dev
            HYPERSPY_VERSION: 'RnM'
            EXTENSION_VERSION: 'dev'
            DEPENDENCIES: numpy scipy scikit-learn
            USE_MAMBA: false
          - DEPENDENCIES_PRE_RELEASE: true
            # Install RC version available on pypi
            LABEL: -dependencies_pre_release
            HYPERSPY_VERSION: 'RnM'
            EXTENSION_VERSION: 'dev'
            DEPENDENCIES: matplotlib numpy scipy sympy h5py scikit-image scikit-learn
            USE_MAMBA: false
          - DEPENDENCIES_NUMBA_DEV: true
            # Instal dev version from numba/label/dev channel using mamba
            LABEL: -dependencies_numba_dev
            HYPERSPY_VERSION: 'RnM'
            EXTENSION_VERSION: 'dev'
            DEPENDENCIES: numba
            USE_MAMBA: true

    env:
      MPLBACKEND: agg
      EXTENSION: kikuchipy lumispy pyxem
      TEST_DEPS: pytest pytest-xdist pytest-rerunfailures pytest-instafail pytest-mpl
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@master
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          # use base environment, so that when using pip, this is from the
          # mambaforge distribution
          auto-activate-base: true
          activate-environment: ""

      - name: Conda info
        run: |
          conda info
          conda list

      - name: Install extensions and Test dependencies
        run: |
          if [ ${{ matrix.USE_MAMBA }} == true ] ; then
            mamba install hyperspy-base ${{ env.EXTENSION }} ${{ env.TEST_DEPS }}
          else
            pip install hyperspy ${{ env.EXTENSION }} ${{ env.TEST_DEPS }}
          fi

      - name: Install numba development version
        if: ${{ matrix.DEPENDENCIES_NUMBA_DEV }}
        run: |
          # Install numba dev version
          mamba update -c numba/label/dev ${{ matrix.DEPENDENCIES }}

      - name: Install dependencies development version
        if: ${{ matrix.DEPENDENCIES_DEV }}
        run: |
          pip install --upgrade --pre --extra-index-url \
            https://pypi.anaconda.org/scipy-wheels-nightly/simple \
            ${{ matrix.DEPENDENCIES }}
          pip install https://github.com/scikit-image/scikit-image/archive/main.zip

      - name: Install dependencies pre release version
        if: ${{ matrix.DEPENDENCIES_PRE_RELEASE }}
        run: |
          pip install --upgrade --pre ${{ matrix.DEPENDENCIES }}

      - name: Conda list
        run: |
          conda list

      - name: Install HyperSpy RnP
        if: contains(matrix.HYPERSPY_VERSION, 'RnP')
        run: |
          pip install https://github.com/hyperspy/hyperspy/archive/RELEASE_next_patch.zip

      - name: Install HyperSpy RnM
        if: contains(matrix.HYPERSPY_VERSION, 'RnM')
        run: |
          pip install https://github.com/hyperspy/hyperspy/archive/RELEASE_next_minor.zip

      - name: Install Extension Dev
        if: contains(matrix.EXTENSION_VERSION, 'dev')
        run: |
          # Needs to use --force-reinstall in case the development version is incorrect
          # and pip doesn't update it
          pip install https://github.com/lumispy/lumispy/archive/main.zip --no-deps --force-reinstall
          pip install https://github.com/pyxem/kikuchipy/archive/develop.zip --no-deps --force-reinstall
          pip install https://github.com/pyxem/pyxem/archive/main.zip --no-deps --force-reinstall

      - name: Clear conda and pip cache
        run: |
          conda clean --all
          pip cache purge

      - name: Conda list
        run: |
          conda list

      - name: Remove test
        # Remove delete test file when hyperspy 2.0 is released
        # See https://github.com/hyperspy/hyperspy/pull/3097
        run: |
          python -c "import hyperspy, os, pathlib; os.remove(pathlib.Path(hyperspy.__file__).parent / 'tests' / 'drawing' / 'test_plot_signal1d.py')"

      - name: Run HyperSpy Test Suite
        run: |
          python -m pytest --pyargs hyperspy

      - name: Run kikuchipy Test Suite
        if: ${{ always() }}
        run: |
          # Virtual buffer (xvfb) required for tests using PyVista
          sudo apt-get install xvfb
          # https://github.com/pyxem/kikuchipy/issues/614
          xvfb-run python -m pytest --pyargs kikuchipy -k "not test_hough_indexing_lazy and not test_optimize_pc_lazy"

      - name: Run LumiSpy Test Suite
        if: ${{ always() }}
        #if: contains(matrix.EXTENSION_VERSION, 'dev') # Tests only against development version, if a fix is not released yet.
        run: |
          python -m pytest --pyargs lumispy

      - name: Run Pyxem Test Suite
        if: ${{ always() }}
        run: |
          # for tests skip, see https://github.com/pyxem/pyxem/issues/856, pending release
          # for tests skip, see https://github.com/pyxem/pyxem/issues/877
          python -m pytest --pyargs pyxem -k "not test_correlations_wrapping and not test_chunk_bytes"
